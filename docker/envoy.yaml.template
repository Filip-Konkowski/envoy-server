static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 15000
      filter_chains:
      - filters:
        - name: envoy.filters.network.http_connection_manager
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
            stat_prefix: ingress_http
            upgrade_configs:
              - upgrade_type: CONNECT
            http_protocol_options:
              accept_http_10: false
              default_host_for_http_10: cert.api.konko.com
            access_log:
              - name: envoy.access_loggers.stdout
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                  log_format:
                    text_format_source:
                      inline_string: |
                        [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%" %PROTOCOL% %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %UPSTREAM_HOST% %UPSTREAM_TRANSPORT_FAILURE_REASON% %DOWNSTREAM_TRANSPORT_FAILURE_REASON% %CONNECTION_TERMINATION_DETAILS% %UPSTREAM_REQUEST_ATTEMPT_COUNT% %UPSTREAM_REMOTE_ADDRESS% %UPSTREAM_LOCAL_ADDRESS% %RESPONSE_CODE_DETAILS%

            route_config:
              virtual_hosts:
              - name: local_service
                domains: ["*"]
                routes:
                - match:
                    prefix: "/"
                  route:
                    cluster: konko_cert_api_cluster

            http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  default_source_code:
                    inline_string: |
                      function envoy_on_request(request_handle)
                        request_handle:logInfo("___________________Hello World From Lua to Filip!___________________")

                        -- Get the current request body as a buffer
                        local body_buffer = request_handle:body()

                        if body_buffer then
                          local body_text = body_buffer:getBytes(0, body_buffer:length())

                          local cjson = require "cjson"
                          local status, json_obj = pcall(cjson.decode, body_text)
                          if not status then
                            request_handle:logInfo("_________________Failed to decode JSON: " .. tostring(json_obj))
                            return
                          end
                          json_obj["hereIsMyHeader"] = "MyCustomValue"
                          local new_body = cjson.encode(json_obj)
                          body_buffer:setBytes(new_body)
                          request_handle:headers():replace("content-length", tostring(#new_body))
                        else
                          request_handle:logInfo("_______________No body to modify, setting a new body.________________")
                        end
                      end
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  default_source_code:
                    inline_string: |
                      function envoy_on_request(request_handle)
                        request_handle:logInfo("Adding Basic Auth Header")

                        -- Encode username and password in Base64
                        local username = "myUser"
                        local password = "myPassword"
                        local credentials = username .. ":" .. password
                        local base64 = require "mime".b64
                        local encoded_credentials = base64(credentials)

                        -- Add Authorization header
                        request_handle:headers():add("Authorization", "Basic " .. encoded_credentials)
                      end
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  default_source_code:
                    inline_string: |
                      function envoy_on_request(request_handle)
                        request_handle:logInfo("_______________Logging request headers:_______________")
                        for key, value in pairs(request_handle:headers()) do
                          request_handle:logInfo(key .. ": " .. value)
                        end
                      end
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  default_source_code:
                    inline_string: |
                      function envoy_on_response(response_handle)
                        response_handle:logInfo("____________Logging response headers:______________")

                        for key, value in pairs(response_handle:headers()) do
                          response_handle:logInfo(key .. ": " .. value)
                        end
                        local response_body = response_handle:body()
                        if response_body then
                          local body_length = response_body:length()
                          if body_length > 0 then
                            local body_bytes = response_body:getBytes(0, body_length)
                            response_handle:logInfo("Response body: " .. body_bytes)
                          else
                            response_handle:logInfo("Response body is empty")
                          end
                        else
                          response_handle:logInfo("No response body present")
                        end
                      end
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
    - name: konko_cert_api_cluster
      type: LOGICAL_DNS
      connect_timeout: 10s
      lb_policy: ROUND_ROBIN

      connect_timeout: 3s
      load_assignment:
        cluster_name: konko_cert_api_cluster
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: cert.api.konko.com
                  port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: "cert.api.konko.com"
          common_tls_context:
            key_log:
              path: "/etc/envoy/tls/logFile.txt"
            alpn_protocols: ["h2", "http/1.1"]
            tls_params:
              tls_minimum_protocol_version: TLSv1_2
              tls_maximum_protocol_version: TLSv1_3
            tls_certificates:
              - certificate_chain: { "filename": "/etc/envoy/tls/client-crt.pem" }
                private_key: { "filename": "/etc/envoy/tls/private-key.pem" }
            validation_context:
              trusted_ca:
                filename: "/etc/envoy/tls/RootCA.pem"

admin:
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901
  access_log_path: "/dev/null"

